#include "unary.regex", "typename.regex", "inner.regex", "binary.regex"
#entry ^addmulplusrest

(?<entry>(?<primexpr>\s*((?&binaryops)|(?&assignexpr)|(?&ternary))(,(?C35)(?&assignorternary))*?\s*))

(((?<castexpr>(?<unaryexpr>(?&inner)(((\[(?&primexpr)\]|[(](?C7)(?&primexpr)[)](?C13))\s*
						|(?<arrowordot>([.]|->))(?C8)(?&identifier)
						|(?<postfixarith>([+][+]|--)\s*)(?C9)))*+|
						(?<inparenths>\s*[(](?&primexpr)[)]\s*)
						|(?&unary))|(?&typename)(?&castexpr))|(?&binaryops)|(?&assignexpr))|(?&ternary))

(?<jumpstatement>\s*(goto(?&identifier);|continue\s*;|break\s*;|return(?&primexpr)?+;)\s*)
(?<iterationstatement>\s*(while\s*[(](?&primexpr)[)](?&statement)|do(?&statement)while\s*[(](?&primexpr)[)]\s*;
	|for\s*[(]((?&declaration)|(?&exprstatement))?+(?&exprstatement)?+(?&primexpr)?+[)](?&statement))\s*)
(?<exprstatement>(?&primexpr)?;\s*)
(?<compoundstatement>\s*[{]((?&declaration)|(?&statement))*+[}]\s*)
(?<selectionstatement>\s*(if\s*[(](?&primexpr)[)](?&statement)(else(?&statement))?+|switch\s*[(](?&primexpr)[)](?&statement))\s*)
(?<statement>(?&label)?+((?&exprstatement)|(?&compoundstatement)|(?&selectionstatement)|(?&iterationstatement)|(?&jumpstatement)))
(?<label>((?&identifier)|case(?&primexpr)|default):)
(?<cprogram>((?&typenameinside)((?&compoundstatement)|(?&abstrinitialization)?(,(?&abstdecloutside)(?&abstrinitialization)?+)*+\s*;\s*))*+)

(?<testmain>^(?&typenameinside)=(?&assignorternary)??;)